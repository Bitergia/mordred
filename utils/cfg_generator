#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016 Bitergia
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# Authors:
#     Luis Cañas-Díaz <lcanas@bitergia.com>
#

import argparse
import os
import sys
import configparser

PERCEVAL_BACKENDS=['bugzilla','bugzillarest','confluence','discourse',
    'gerrit','git','github','gmane','jenkins','jira','kitsune','mbox',
    'mediawiki','pipermail','remo','stackexchange','supybot','telegram']


USAGE_MSG = \
"""%(prog)s [--help] [-o <file>] [-b <backends>]"""

class Error(Exception):
    """Base class for exceptions in this module."""
    pass

class BackendError(Error):
    """Exception raised for errors in the list of backends
    """
    def __init__(self, expression):
        self.expression = expression

class ConfigFileExists(Error):
    """Exception raised when output file exists
    """
    def __init__(self, expression):
        self.expression = expression


def main():
    args = parse_args()
    check_args(args)
    create_config(args.output_file, args.backends)

def parse_args():
    parser = argparse.ArgumentParser(usage=USAGE_MSG)

    # Options
    parser.add_argument('-b', '--backends',
                        dest='backends', nargs='+',
                        help='List of backends to be enabled', default='')

    parser.add_argument('-o', '--output', dest='output_file',
                        help='Output file', default='')

    args = parser.parse_args()

    return args

def check_args(args):
    """
    Check arguments to handle input errors and avoid typical errors
    """
    for eb in args.backends:
        if eb not in PERCEVAL_BACKENDS:
            raise BackendError(eb)

    if os.path.isfile(args.output_file):
        raise ConfigFileExists(args.output_file)

def create_config(path, enabled_backends):
    """
    Create a config file
    """
    config = configparser.ConfigParser()
    config.add_section('general')
    config.set('general','short_name','')
    config.set('general','update','true')
    config.set('general','sleep', '0 # in seconds')
    config.set('general','projects_file', '# /etc/mordred/project.json')
    config.set('general','debug', 'false')
    config.set('general','logs_dir', '# /var/log/mordred/')
    config.set('general','from_date', '# yyyy-mm-dd')
    config.set('general','debug', 'false')

    config.add_section('es_collection')
    config.set('es_collection','url','')
    config.set('es_collection','user','')
    config.set('es_collection','password','')
    config.add_section('es_enrichment')
    config.set('es_enrichment','url','')
    config.set('es_enrichment','user','')
    config.set('es_enrichment','password','')

    config.add_section('sortinghat')
    config.set('sortinghat','host','')
    config.set('sortinghat','user','')
    config.set('sortinghat','password','')
    config.set('sortinghat','load_organizations','false')
    config.set('sortinghat','orgs_file','/home/bitergia/mordred/conf/orgs/orgs_file')
    config.set('sortinghat','unify_method','# see: sortinghat unify --help ')
    config.set('sortinghat','unaffiliated_group','# commonly: Unknown')

    config.add_section('phases')
    config.set('phases','collection','true')
    config.set('phases','identities','true')
    config.set('phases','enrichment','true')
    config.set('phases','studies','true')

    ### we create here the conf section for backends
    if (len(enabled_backends) == 0):
        enabled_backends = PERCEVAL_BACKENDS #if empty, generate all

    for eb in enabled_backends:
        if eb not in PERCEVAL_BACKENDS:
            raise BackendError(eb)
        config.add_section(str(eb))
        config.set(str(eb),'raw_index','')
        config.set(str(eb),'enriched_index','')

    #last step, dump content to file
    with open(path, 'w') as config_file:
        config.write(config_file)


if __name__ == '__main__':
    try:
        code = main()
        sys.exit(code)
    except KeyboardInterrupt:
        s = '\n\nReceived Ctrl-C or other break signal. Exiting.\n'
        sys.stdout.write(s)
        sys.exit(0)
    except RuntimeError as e:
        s = 'Error: %s\n' % str(e)
        sys.stderr.write(s)
        sys.exit(1)
    except BackendError as e:
        s = 'Error: %s backend does not exist\n' % str(e)
        sys.stderr.write(s)
        sys.exit(1)
    except ConfigFileExists as e:
        s = 'Error: %s file already exists\n' % str(e)
        sys.stderr.write(s)
        sys.exit(1)

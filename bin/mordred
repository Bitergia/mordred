#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016 Bitergia
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# Authors:
#     Luis Cañas-Díaz <lcanas@bitergia.com>
#     Alvaro del Castillo <acs@bitergia.com>
#


import argparse
import configparser
import logging
import os
import sys
import traceback

sys.path.insert(1, '.')

from mordred.error import ElasticSearchError
from mordred.error import DataCollectionError
from mordred.mordred import Mordred


SLEEPFOR_ERROR = """Error: You may be Arthur, King of the Britons. But you still """ + \
"""need the 'sleep_for' variable in sortinghat section\n - Mordred said."""


def setup_logs(logs_dir, debug_mode):

    if debug_mode:
        logging_mode = logging.DEBUG
    else:
        logging_mode = logging.INFO

    # create logger with 'spam_application'
    logger = logging.getLogger()
    logger.setLevel(logging_mode)
    # create file handler which logs even debug messages

    fh_filepath = os.path.join(logs_dir,'all.log')
    fh = logging.FileHandler(fh_filepath)
    fh.setLevel(logging_mode)
    # create console handler with a higher log level
    ch = logging.StreamHandler()
    ch.setLevel(logging.ERROR)
    # create formatter and add it to the handlers
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    fh.setFormatter(formatter)
    ch.setFormatter(formatter)
    # add the handlers to the logger
    logger.addHandler(fh)
    logger.addHandler(ch)

    pfh_filepath = os.path.join(logs_dir,'perceval.log')
    pfh = logging.FileHandler(pfh_filepath)
    fh.setLevel(logging_mode)
    pfh.setFormatter(formatter)
    perceval_logger = logging.getLogger('perceval')
    perceval_logger.addHandler(pfh)

    gfh_filepath = os.path.join(logs_dir,'grimoire.log')
    gfh = logging.FileHandler(gfh_filepath)
    fh.setLevel(logging_mode)
    gfh.setFormatter(formatter)
    perceval_logger = logging.getLogger('grimoire')
    perceval_logger.addHandler(gfh)

    wfh_filepath = os.path.join(logs_dir,'mordred.log')
    wfh = logging.FileHandler(wfh_filepath)
    wfh.setLevel(logging_mode)
    wfh.setFormatter(formatter)
    workflow_logger = logging.getLogger('mordred')
    workflow_logger.addHandler(wfh)

    logging.getLogger('requests').setLevel(logging.WARNING)
    logging.getLogger('urrlib3').setLevel(logging.WARNING)

    return logger

def parse_args():

    parser = argparse.ArgumentParser(
        description='Mordred, the friendly friend of GrimoireELK',
        epilog='Software metrics for your peace of mind'
        )

    parser.add_argument('-c','--config', help='Configuration file',
        required=True, dest='config_file')

    args = parser.parse_args()
    return args


def log_conf_from(config_file):

    config = configparser.ConfigParser()
    config.read(config_file)

    try:
        logs_dir = config.get('general','logs_dir')
    except:
        print("Error reading the configuration file %s: 'logs_dir' variable in 'general' section is missing"% (str(config_file)))
        sys.exit(1)

    try:
        debug_mode = config.getboolean('general', 'debug')
    except:
        debug_mode = False
    return logs_dir, debug_mode

def debug__dir_from(config_file):

    config = configparser.ConfigParser()
    config.read(config_file)

    try:
        logs_dir = config.get('general','logs_dir')
    except:
        print("Error reading the configuration file %s: 'logs_dir' variable in 'general' section is missing"% (str(config_file)))
        sys.exit(1)
    return logs_dir


if __name__ == '__main__':
    args = parse_args()
    logs_dir, debug_mode = log_conf_from(args.config_file)
    logger = setup_logs(logs_dir, debug_mode)
    obj = Mordred(args.config_file)
    try:
        obj.run()
    except ElasticSearchError as e:
        s = 'Error: %s\n' % str(e)
        sys.stderr.write(s)
        sys.exit(1)
    except:
        logger.info("OTHER EXCEPTION") #FIXME
        var = traceback.format_exc()
        logger.error("Unexpected error. See the traceback below")
        logger.error(var)
        sys.exit(1)
